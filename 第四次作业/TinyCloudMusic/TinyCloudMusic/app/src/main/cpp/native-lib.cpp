/*
This file was original generated by Android NDK automatically, and used as Native library entry.
*/
#include <jni.h>
#include <string>

extern "C" {
#include "./mongoose/mongoose.h"
}

#define __NDK_JNI_DEF JNICALL JNIEXPORT

//demo "Hello world"
extern "C"
JNIEXPORT jstring

JNICALL
Java_com_example_evide_tinycloudmusic_MainActivity_stringFromJNI(
        JNIEnv *env,
        jobject /* this */) {
    std::string hello = "Hello from C++";
    return env->NewStringUTF(hello.c_str());
}

/*
Simple Mongoose HTTP server(Test use only):
*/

#define CMD_PLAY_ID 1

extern "C" {

static int cur_id = 0;
static int cmd_flag = 0;
static char cmd_arg[2048];

static void mg_puts(struct mg_connection *c, const char *s)
{
    mg_send_head(c, 200, strlen(s), "Content-Type: text/plain");
    mg_printf(c, "%s", s);
}

__NDK_JNI_DEF jint Java_com_example_evide_tinycloudmusic_MongooseService_GetCurId()
{
    return cur_id;
}
__NDK_JNI_DEF void Java_com_example_evide_tinycloudmusic_MongooseService_SetCurId(jint id)
{
    cur_id = id;
}

__NDK_JNI_DEF void Java_com_example_evide_tinycloudmusic_MongooseService_SetCmdFlag(jint f)
{
    cmd_flag = f;
}

__NDK_JNI_DEF jint Java_com_example_evide_tinycloudmusic_MongooseService_GetCmdFlag(jint f)
{
    return  cmd_flag;
}

__NDK_JNI_DEF jstring Java_com_example_evide_tinycloudmusic_MongooseService_GetCmdArg(JNIEnv *env,
                                                                                      jobject /* this */)
{
    return env->NewStringUTF(cmd_arg);
}


static char s_http_port[8] = "8000";
static struct mg_serve_http_opts s_http_server_opts;
static void ev_handler(struct mg_connection *nc, int ev, void *p)
{
    struct http_message *msg = (struct http_message *)p;
    char uri_buf[1024];
    char query_string[2048];
    char buf[4096];
    if (ev == MG_EV_HTTP_REQUEST) {
        if (*(msg->uri.p + 1) == '.') {
            memset(uri_buf, 0 , 1024);
            memset(query_string, 0 , 2048);
            sprintf(uri_buf, "%.*s", (int)msg->uri.len, msg->uri.p);
            sprintf(query_string, "%.*s", (int)msg->query_string.len, msg->query_string.p);
            sprintf(buf, "uri %s and query %s",uri_buf, query_string);
            //mg_puts(nc, buf);
            if (!strcmp(uri_buf, "/.playid")) {
                cmd_flag = CMD_PLAY_ID;
                strcpy(cmd_arg, query_string);
                mg_puts(nc, uri_buf);
            } else {
                mg_puts(nc, buf);
            }
        } else
            mg_serve_http(nc, (struct http_message *)p, s_http_server_opts);
    }
}

__NDK_JNI_DEF jboolean Java_com_example_evide_tinycloudmusic_MongooseService_SimpleMongooseHTTPServerTest(jint port)
{
    struct mg_mgr mgr;
    struct mg_connection *nc;
    if (!port)
        sprintf(s_http_port, "%d", port);
    mg_mgr_init(&mgr, NULL);
    nc = mg_bind(&mgr, s_http_port, ev_handler);
    if (nc == NULL) //Failed while create connection
        return (jboolean) false;
    mg_set_protocol_http_websocket(nc);
    s_http_server_opts.document_root = "/sdcard/";
    s_http_server_opts.enable_directory_listing = "yes";
    for (;;) {
        mg_mgr_poll(&mgr, 1000);
    }
    mg_mgr_free(&mgr);
    return (jboolean) true;
}
}